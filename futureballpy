from random import randint, uniform, randrange
from sounds import SoundEffect
import random
import pygame
import math
import settings


class Ball(pygame.sprite.Sprite):
    def __init__(self, color, size, pos):
        super().__init__()

        self.image = pygame.Surface(size)
        self.image.fill(settings.BLACK)
        self.image.set_colorkey(settings.BLACK)

        pygame.draw.rect(self.image, color, [0, 0, size[0], size[1]])
        self.rect = self.image.get_rect()
        self.rect.topleft = pos
        self.rotation = 0
        self.bouncecount = 0
        self.speed = 0
        self.x = 0
        self.y = 0
        self.direction = 0
        self.width = 10
        self.height = 10
        self.sfx = SoundEffect(settings.HIT, 1.0)
        self.sfx2 = SoundEffect(settings.PONG, 1.0)
        self.sfx3 = SoundEffect(settings.BULLY, 1.0)
        self.reset()
        
    def reset(self):
        self.x = random.randrange(300,400)
        self.y = 350.0
        self.speed=1.4
        self.direction = random.randrange(-45,45)
        if random.randrange(4) == 0 :
            self.direction += 180
            self.y = 50
        if random.randrange(2) == 1 :
            self.direction += 90
            self.y -= 50
    def sound_effect(self):
        if settings.AUDIO == True:
            self.sfx.play()
        #gene = randint(1,6)
        #if gene == 1:
        #    
        #else:
        #    self.sfx3.play()
        
    def sound_effect2(self):
        if settings.AUDIO == True:
            self.sfx2.play()

    def update(self):
        direction_radians = math.radians(self.direction)
        
        self.x += self.speed * math.sin(direction_radians)
        self.y -= self.speed * math.cos(direction_radians)
        if self.y <-10:
            self.reset()
        if self.y > 710:
            self.reset()
        self.rect.x = self.x
        self.rect.y = self.y
        if self.x <= 0:
            self.direction = (360-self.direction)%360
            
        if self.x >= 700:
            self.direction = (360-self.direction)%360
            
        if self.y <= 0:
            self.direction = (360-self.direction)%360
        if self.y >= 700:
            self.direction = (360-self.direction)%360

    def bounce(self):
        self.direction = (180-self.direction)%360
        self.speed *=1.01
        self.bouncecount+=1
    def bounce2(self):
        self.direction = (90-self.direction)%360
        self.speed *=1.01
        self.bouncecount+=1
